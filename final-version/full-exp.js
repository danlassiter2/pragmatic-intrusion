/******************************************************************************/
/*** Preamble *****************************************************************/
/******************************************************************************/

/*

CODE WORDS to search through for to check if anything needs updating/fixing/checking:
UPDATE - tick, 27/8/24
CHECK - tick, 27/8/24
NOTE - tick, 27/8/24
FIX - tick, 27/8/24
REMOVE - tick, 27/8/24
UNCOMMENT - tick, 27/8/24
NEW - changes made by Sabine

*/

/******************************************************************************/
/*** Automatic retry for data sending in jsPsych ******************************/
/******************************************************************************/

// The following code will allow the experiment to retry if sending (data saving) failed, 
// e.g. because of poor network connections. 
// From Alisdair:  https://ppls.ed.ac.uk/techsupport/2024/07/16/automatic-retry-for-data-sending-in-jspsych/

async function fetch_with_retry(...args) {
    let count = 0;
    while(count < 3) {
      try {
        let response = await fetch(...args);
        if (response.status !== 200) {
          throw new Error("Didn't get 200 Success");
        }
        return response;
      } catch(error) {
        console.log(error);
      }
      count++;
      await new Promise(x => setTimeout(x, 250));
    }
    throw new Error("Too many retries");
}

/******************************************************************************/
/*** Initialise jsPsych *******************************************************/
/******************************************************************************/

var jsPsych = initJsPsych({
    on_finish: function () {
        var all_data = jsPsych.data.get(); //get all data to save at the end as a backup
        console.log(all_data);
        var all_data_as_csv = all_data.csv(); //convert to csv format
        save_data("pragdep/backup_autogenerated_data/pragdep_backup_data.csv", all_data_as_csv); //save it (appends each time a ppt completes the exp)
        //window.location = "https://app.prolific.com/submissions/complete?cc=CCJBI1KV"; // url to send ppts back to Prolific (for live version only)
    }
});

/******************************************************************************/
/*** Maintaining a list of images to preload **********************************/
/******************************************************************************/

var images_to_preload = ["stimuli/ana1-ff-1+arc2-ft-1+arc3-tt-2.jpg","stimuli/ana1-ff-2+only2-tt-1+def_ex2-tf-2.jpg","stimuli/ana1-ft-1+ana2-tt-2+only2-ft-1+arc2-ft-2.jpg","stimuli/ana1-ft-2+only2-ft-2+arc2-tf-1+arc3-tf-1+scalar2-tt-2.jpg","stimuli/ana1-tf-1+only2-ff-1.jpg","stimuli/ana1-tf-2+arc2-ff-1+def_ex2-ft-1.jpg","stimuli/ana1-tt-1+ana2-tf-1+only2-ff-2+def_ex-ft-2.jpg","stimuli/ana1-tt-2+def_ex3-tt-1.jpg","stimuli/arc1-ff-1+con2-tt-1+ana3-tf-1+only2-tt-2+def_ex2-ff-1.jpg","stimuli/arc1-ff-2+ana2-tf-2+ana3-tf-2.jpg","stimuli/arc1-ft-1+ana3-ft-1+def_ex3-tt-2.jpg","stimuli/arc1-ft-2+con3-ff-2.jpg","stimuli/arc1-tf-1+only2-tf-1+def_ex2-ff-2.jpg","stimuli/arc1-tf-2+arc3-tf-2.jpg","stimuli/arc1-tt-1+ana2-ft-2.jpg","stimuli/arc1-tt-2+ana2-ft-1+only2-tf-2.jpg","stimuli/arc3-ft-1+def_ex2-tf-1.jpg","stimuli/arc3-ft-2.jpg","stimuli/con1-ff-1+con2-tf-1+only3-ff-2+arc2-ff-2+def_un3-tt-1.jpg","stimuli/con1-ff-2+con2-ft-2+con3-ff-1+ana2-tt-1+ana3-ft-2+def_un3-tt-2.jpg","stimuli/con1-ft-1+ana3-ff-1+def_ex3-tf-1+def_un3-ft-2+def_ex2-ft-2.jpg","stimuli/con1-ft-2+con2-ff-1+con3-ft-2+ana2-ff-1.jpg","stimuli/con1-tf-1+ana3-tt-2.jpg","stimuli/con1-tf-2.jpg","stimuli/con1-tt-1+con3-tt-1+arc2-tt-1+arc3-tt-1+def_ex3-tf-2.jpg","stimuli/con1-tt-2+ana3-ff-2+only3-ff-1.jpg","stimuli/def_ex1-ff-1+ana2-ff-2+only3-ft-2+arc2-tt-2.jpg","stimuli/def_ex1-ft-1+def_un-ft-2.jpg","stimuli/def_ex1-ft-2.jpg","stimuli/def_ex1-tf-1+def_un-ft-1.jpg","stimuli/def_ex1-tf-2+con2-tf-2+con3-ft-1+def_un3-ft-1.jpg","stimuli/def_ex1-tt-1+con2-ft-1+def_ex2-tt-1.jpg","stimuli/def_ex1-tt-2+con3-tf-1+con2-ff-2.jpg","stimuli/def_ex2-tt-2+scalar2-ft-2.jpg","stimuli/def_un1-ff-1+scalar2-ft-1+numeral2-tf-2.jpg","stimuli/def_un1-ff-2+only3-tt-1+scalar3-ft-2.jpg","stimuli/def_un1-ft-1+con3-tt-2+def_ex1-ff-2.jpg","stimuli/def_un1-ft-2+scalar2-tt-1.jpg","stimuli/def_un1-tf-1+numeral2-ff-1.jpg","stimuli/def_un1-tf-2+only3-ft-1+scalar3-ft-1+numeral2-tt-2.jpg","stimuli/def_un1-tt-1+con3-tf-2+arc2-tf-2.jpg","stimuli/def_un1-tt-2+arc3-ff-1+numeral1-tt-2.jpg","stimuli/def_un2-ff-1+numeral1-tf-1.jpg","stimuli/def_un2-ff-2.jpg","stimuli/def_un2-tf-1.jpg","stimuli/def_un2-tf-2+numeral1-tf-2.jpg","stimuli/def_un3-ff-1+numeral1-ff-1.jpg","stimuli/def_un3-ff-2+scalar2-tf-1.+scalar3-tt-1jpg.jpg","stimuli/def_un3-tf-1+scalar3-tt-2.jpg","stimuli/def_un3-tf-2+scalar2-tf-2+numeral3-ff-1.jpg","stimuli/numeral3-ff-2.jpg","stimuli/numeral3-tf-1.jpg","stimuli/numeral3-tf-2.jpg","stimuli/numeral3-tt-2.jpg","stimuli/only1-ff-1.jpg","stimuli/only1-ff-2+only3-tf-2+def_ex3-ff-2+def_un2-ft-2.jpg","stimuli/only1-ft-1+numeral1-tt-1.jpg","stimuli/only1-ft-2+con2-tt-2+ana3-tt-1+only3-tf-1+arc3-ff-2+def_ex3-ft-1.jpg","stimuli/only1-tf-1+only3-tt-2+def_un2-ft-1.jpg","stimuli/only1-tf-2+cons-ft-2+def_ex3-ff-1.jpg","stimuli/only1-tt-1+def_un2-tt-2.jpg","stimuli/only1-tt-2+def_ex3-ft-2+def_un2-tt-1.jpg","stimuli/scalar1-ft-1+numeral2-tt-1.jpg","stimuli/scalar1-ft-2+numeral2-tf-1.jpg","stimuli/scalar1-tf-1.jpg","stimuli/scalar1-tf-2+numeral2-ff-2.jpg","stimuli/scalar1-tt-1.jpg","stimuli/scalar1-tt-2.jpg","stimuli/scalar3-tf-1.jpg","stimuli/scalar3-tf-2+numeral1-ff-2+numeral3-tt-1.jpg"];

function find_imgs(str) {
    var matches = []
    for (filename of images_to_preload) {
        if (filename.includes(str)) {
            matches.push(filename);
        }
    }
    return matches;
}

/******************************************************************************/
/*** Saving experiment data trial by trial ************************************/
/******************************************************************************/

function save_data(name, data_in) {
    var url = "save_data.php";
    var data_to_send = { filename: name, filedata: data_in };
    fetch_with_retry(url, {
      method: "POST",
      body: JSON.stringify(data_to_send),
      headers: new Headers({
        "Content-Type": "application/json",
        }),
    });
}

/*
The following code will save data from critical trials line by line. 

Note that experiment data is saved to a file named pragdep_ID.csv, where pragdep stands for "Pragmatics of dependent measures". ID is the randomly-generated participant ID or Prolific ID, depending on which version of exp is run (dev or live).

Survey data (demographics and feedback) is saved in its own file, named pragdep_ID_survey.csv.
*/
function save_pragdep_data_line(data) {
    // choose the data we want to save - this will also determine the order of the columns (so write_header should match this) 
    // NEW: need to add qud data to this
    var data_to_save = [
        participant_id,
        data.condition,
        data.response_format, // slider or radio buttons (this will also be clear from response)
        data.block, // training or test
        data.training_trial_counter,
        data.test_trial_counter,
        data.trial_index,
        data.target_truth_value,
        data.all_TVs,
        data.target_content_type,
        data.linguistic_prompt,
        data.target_image,
        data.qud,
        ...data.images_in_order, // saves all images in the presented order (0-3). The ... is called spread, is applied within another array to make them into elements in the top level array (instead of a nested array). Ex: [...[1,2],3]=[1,2,3]. Avoids issue with the quotation loop below, as would otherwise apply "" around the whole array images_in_order (and we want this array to be split for readability in the csv file later)
        data.response,
        data.time_elapsed,
        data.rt,
        data.stimulus
    ];

    // add quotation marks around each element that is saved to avoid splitting prompts that have commas
    for (i in data_to_save) {
        data_to_save[i] = "\"" + data_to_save[i] + "\"";
    }

    // join each element in the array with commas and add a new line
    var line = data_to_save.join(",") + "\n"; 
    var this_participant_filename = "pragdep/pragdep_" + participant_id + ".csv";
    save_data(this_participant_filename, line);
  }

/******************************************************************************/
/*** Saving survey data trial by trial ****************************************/
/******************************************************************************/

function save_survey_line(data) {
    // choose the data we want to save - this will also determine the order of the columns
    var survey_data = data.response;
    var data_to_save = [
      participant_id,
      survey_data.first_lang,
      survey_data.bilingual,
      survey_data.other_lang,
      survey_data.colourblind,
      survey_data.feedback
    ];

    // add quotation marks around each element that is saved to avoid splitting prompts that have commas
    for (i in data_to_save) {
        data_to_save[i] = "\"" + data_to_save[i] + "\"";
    }

    // join these with commas and add a newline
    var line = data_to_save.join(",") + "\n";
    save_data("pragdep/surveys/pragdep_" + participant_id + "_survey.csv", line); 
  }  

/******************************************************************************/
/*** Fetch the Prolific ID to use in data filename ****************************/
/******************************************************************************/

// just creating random ID for internal piloting as won't be through Prolific
// var participant_id = jsPsych.randomization.randomID(10);

// Will change to this to extract Prolific IDs: UNCOMMENT before posting on Prolific (live version only)
var participant_id = jsPsych.data.getURLVariable("PROLIFIC_PID");

// for testing not on prolific, generate a random id
if (participant_id == null) {
    var participant_id = jsPsych.randomization.randomID(10);
}

// record the participant ID in the jsPsych data so this can be accessed by the backup "save all data" code (lines 65-70) 
// this adds a data property called 'participant_id' to every trial
jsPsych.data.addProperties({
    participant_id: participant_id,
  });

/******************************************************************************/
/*** Condition assignment (between participants) **************************************/
/******************************************************************************/

// randomly select response format (radio buttons or slider) at start of experiment
// because there are two binary and 3 slider options below, to get equal-ish amounts of data
// the choice is biased toward slider (60/40) 
var responseformat_assignment = jsPsych.randomization.sampleWithoutReplacement(
    ["radio", "radio", "slider", "slider", "slider"], 1)[0];
//console.log(responseformat_assignment);

/*// store response format as a variable to use dynamically in the trial building function
if (responseformat_assignment == "radio") {
    plugin_type = jsPsychImageArrayMultiChoice; } 
  else { 
    plugin_type = jsPsychImageArraySliderResponse; }
  console.log(plugin_type); */

// pick a random condition + set plugin to depend on response format assignment for the training trial building function
// Note that if radio is chosen above, it only chooses between acceptability and truth 
// (not likelihood, as that's too unnatural and likely won't provide interesting data)
if (responseformat_assignment == "radio") { 
    var condition_assignment = 
        jsPsych.randomization.sampleWithoutReplacement(["truth", "acceptability"], 1)[0];
    // also when response format is radio, set plugin type to be radio button plugin (to be used dynamically in the trial building function)
    var plugin_type = jsPsychImageArrayMultiChoice;
} else {
    var condition_assignment = 
        jsPsych.randomization.sampleWithoutReplacement(["truth", "acceptability", "likelihood"], 1)[0];
    // and again, when response format is slider, set plugin to be slider plugin
    var plugin_type = jsPsychImageArraySliderResponse;
}
//console.log("Condition:", condition_assignment);

// Random assignment for QUD (Question Under Discussion)
//      75% of participants will see randomly selected QUDs by trial
//      25% will see no QUDs anywhere
var qud_global = jsPsych.randomization.sampleWithoutReplacement(["yes", "yes", "yes", "no"], 1)[0];

// Set the text and names for the response options and the instructions in a trial based on response format, condition assignment and qud assignment determined above, to pass to trial building function).
// if the response format is radio, set these values for each of the conditions:
// (note that likelihood is not included here as we are not doing binary likelihood trials) 
// NEW: added conditionals for QUDs here - i.e. if qud_global is 'no', follow Vilde's setup, else use "How true is the response above" for instruction 
if (qud_global == "no") {    
    if (responseformat_assignment == "radio") { 
        if (condition_assignment == "truth") {
            response_options = [  
                {name: "truth", text: "True"}, 
                {name: "truth", text: "False"}
                ];
            instruction = "<p><em>For the highlighted card, is the description above true?</em></p>"; //NEW: removed "following" and added "above"
            } else {
            response_options = [  
                {name: "acceptability", text: "Acceptable"},
                {name: "acceptability", text: "Unacceptable"}
                ];
            instruction = "<p><em>For the highlighted card, is the description above acceptable?</em></p>"; //NEW: removed "following" and added "above"
            }
    // or else, the response format is slider, and these values are chosen:
    } else { 
        if (condition_assignment == "truth") {
            response_options = ["Completely false", "Completely true"];
            instruction = "<p><em>For the highlighted card, how true is the description above?</em></p>"; //NEW: removed "following" and added "above"
            } else if (condition_assignment == "acceptability") {
            response_options = ["Completely unacceptable", "Completely acceptable"];
            instruction = "<p><em>For the highlighted card, how acceptable is the description above?</em></p>"; //NEW: removed "following" and added "above"
            } else if (condition_assignment == "likelihood") {
            response_options = ["Completely impossible", "Completely certain"];
            instruction = "<p><em>One card is picked at random. How likely is it that the description above is true?</em></p>"; //NEW: re-worded to accommodate new layout
            }
        }
} else { //if this participant will see QUDs
    if (responseformat_assignment == "radio") { 
        if (condition_assignment == "truth") {
            response_options = [  
                {name: "truth", text: "True"}, 
                {name: "truth", text: "False"}
                ];
            instruction = "<p><em>For the highlighted card, is the response above true?</em></p>"; //NEW: removed "following" and added "above"
            } else {
            response_options = [  
                {name: "acceptability", text: "Acceptable"},
                {name: "acceptability", text: "Unacceptable"}
                ];
            instruction = "<p><em>For the highlighted card, is the response above acceptable?</em></p>"; //NEW: removed "following" and added "above"
            }
    // or else, the response format is slider, and these values are chosen:
    } else { 
        if (condition_assignment == "truth") {
            response_options = ["Completely false", "Completely true"];
            instruction = "<p><em>For the highlighted card, how true is the response above?</em></p>";
            } else if (condition_assignment == "acceptability") {
            response_options = ["Completely unacceptable", "Completely acceptable"];
            instruction = "<p><em>For the highlighted card, how acceptable is the response above?</em></p>"; 
            } else if (condition_assignment == "likelihood") {
            response_options = ["Completely impossible", "Completely certain"];
            instruction = "<p><em>One card is picked at random. How likely is it that the response above is true?</em></p>";
        }
    }
}
//console.log("Response options:", response_options);

/******************************************************************************/
/*** Creating training trials *************************************************/
/******************************************************************************/

/* Structure:
- make a trial, which will either be slider or radio depending on response format assignment
- and either likelihood, acceptability or truth depending on condition assignment
- NEW: and either primary, secondary, all, or none QUD
- in that trial, check the response on_finish
- if correct response: give correct feedback --> move on to testing trials
- if incorrect response: give incorrect feedback --> loop back to the same trial until the correct answer is provided
- 3 training trials in total. Stim and prompt are the same regardless of condition and response format

REMOVE the following notes from non-dev version
prob trials: extreme probabilities, but also one trial that is 50/50 (i.e. 1 clear true, 1 clear false, 1 even chance)
--- note: this one will ofc only be slider

non-prob trials: two trials that are clearly appropriate/true and one that clearly isn't
*/

// function to build a training trial
// NEW: added qud to this
function make_training_trial(prompt, target, filler_1, filler_2, filler_3) {
    
    // build image file paths
    var target_filename = "stimuli/training_stims/" + target + ".jpg"; 
    var filler_1_filename = "stimuli/training_stims/" + filler_1 + ".jpg";
    var filler_2_filename = "stimuli/training_stims/" + filler_2 + ".jpg";
    var filler_3_filename = "stimuli/training_stims/" + filler_3 + ".jpg";
    // NOTE Probably a neater way to do this, at least for filler images! But this works.

    // put all the images together 
    var images_unshuffled = [].concat(target_filename, filler_1_filename, filler_2_filename, filler_3_filename); 
    //console.log(images_unshuffled)
    images_to_preload.push(...images_unshuffled); // using spread to avoid preload list having a nested array; seems to work
    var images = jsPsych.randomization.shuffle(images_unshuffled);


    // set the highlighted image index dependening on condition assignment 
    if (condition_assignment == "likelihood") {
        index = 4; // as images are 0-3, this makes there be no highlighted image for likelihood trials
    } else {
        index = images.indexOf(target_filename); // else the highlight is determined by the position of the target image
    }   

    // define what the correct answer is, which depends on response format and which of the three testing trials is running.
    // The latter will be determined by "target", which is input to the trial building function when calling it below 
    if (responseformat_assignment == "radio") {
        if (target == "target-A") {
        correct_answer = ["True", "Acceptable"]; 
        } else if (target == "target-B") {
        correct_answer = ["True", "Acceptable"];
        } else if (target == "target-C") {
        correct_answer = ["False", "Unacceptable"]; 
        }
    } else if (responseformat_assignment == "slider") { 
        // specify fairly generous ranges for what counts as correct in slider trials, although we'd expect very close to exact values for these (as listed)
        if (target == "target-A") {
        correct_answer = [85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]; // expect 100 or close to
        } else if (target == "target-B") {
            if (condition_assignment == "truth") {
                correct_answer = [85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]; // completely true    
            } else if (condition_assignment == "acceptability") {
                correct_answer = [85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]; // completely acceptable
            } else if (condition_assignment == "likelihood") {
            correct_answer = [40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60];} // expect 50 or close to
        } else if (target == "target-C") {
            correct_answer = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]; 
        };
    }
  
    var correct_answer = correct_answer; 
    // seems we have to store this for the trial variable below to be able to access it. 

    // Counter variable for storing how often a training trial was retaken; it will start from 1 every time the training trial building
    // function is called, i.e. it will reset to 1 for each of the three trials
    var training_trial_counter = 1; 

    // a subtrial that builds the training trial
    var training_trial = {
        type: plugin_type,
        images: images,
        preamble: "<br>" + instruction, 
        prompt: prompt, 
        labels: response_options, 
        highlighted_image_index: index, // this will depend on target, like in test 

        //at the start of the trial, make a note of all relevant info to be saved
        on_start: function (trial) { // NOTE: in main exp, the text in brackets matches name of the variable ("training_trial")
            trial.data = { 
                condition: condition_assignment,
                response_format: responseformat_assignment,
                block: "training", 
                training_trial_counter: training_trial_counter, // starts off with the value set outside of the plugin, i.e. 1, will be added to (+1) 
                // every time the incorrect_feedback is shown, i.e. every time the participant is prompted to try again
                test_trial_counter: "NA", 
                target_truth_value: "NA", 
                all_TVs: "NA",
                target_content_type: "NA",
                qud: "NA", 
                linguistic_prompt: prompt, 
                target_image: target_filename,
                images_in_order: images, // saves the filenames in the order they were presented in a trial, i.e. the shuffled order
                // NOTE Not really necessary for training block, but might as well save it
                stimulus: "NA"
            };
        },
        on_finish: function (data) {
            // check if response is included in the correct_answer array - set data.correct as "true" if it is
            if(correct_answer.includes(data.response)){data.correct = true} 
            // NOTE: === is identity (i.e. will check for match and type), == is only looking for equality (so will check for match 
            // but not in type; e.g. the following will all return true: 1 == '1', 1 == 1, 1 == true)
            else {data.correct = false}
            save_pragdep_data_line(data); //save the trial data 
        },
    };

    // a subtrial that appears if the participant chooses the wrong response
    var incorrect_feedback = {
        type: plugin_type,
        images: images,
        preamble: "<b style=color:red>Incorrect! Try again.</b><br>" + instruction, 
        prompt: prompt,
        labels: response_options, 
        highlighted_image_index: index, 

        on_start: function (trial) { 
            trial.data = {
                condition: condition_assignment,
                response_format: responseformat_assignment,
                block: "training",
                training_trial_counter: ++training_trial_counter, // will add 1 to whatever the variable is now. 
                // Note: ++ needs to come before the variable to return the incremented number (if it comes after it will return the value of the variable before it was incremented on, which is not useful here)
                test_trial_counter: "NA",
                target_truth_value: "NA", 
                all_TVs: "NA",
                target_content_type: "NA", 
                qud: "NA",
                linguistic_prompt: prompt, 
                target_image: target_filename,
                images_in_order: images,
                stimulus: "NA" 
            };
        },
        on_finish: function (data) {
            // save to data property whether response was correct (=true) or incorrect (=false)
            if(correct_answer.includes(data.response)){data.correct = true}  
            else {data.correct = false}
            save_pragdep_data_line(data); //save the trial data 
        },
    };

    // a conditional node that tells to only show incorrect feedback if the most recent trial was answered incorrectly
    var conditional_node = {
        timeline: [incorrect_feedback],
        conditional_function: function () {
            var last_trial_correct = jsPsych.data.get().last(1).values()[0].correct // gets what data.correct was stored as 
            if(last_trial_correct == false) { // if response in most recent trial was stored as false, i.e. incorrect, then
                return true; // means we *will* run the incorrect_feedback timeline
            } else {
                return false; // means we will not
            } 
        }
    };

    // show incorrect feedback every time the participant chooses the wrong answer
    var retry_loop = {
        timeline: [conditional_node],
        loop_function: function () { 
            var last_trial_correct = jsPsych.data.get().last(1).values()[0].correct
            if(last_trial_correct == false) { 
                return true; // means we *will* run the conditional_node timeline
            } else {
                return false; // means we will not 
            } 
        },
    };

    // set the feedback that will be displayed when a participant chooses the correct response, to be used in the correct_feedback subtrial below
    if (condition_assignment == "truth") { 
        if (responseformat_assignment == "radio") {
            if (target == "target-A") {
                correct_response = "true.</p>";
            } else if (target == "target-B") {
                correct_response = "true.</p>";
            } else if (target == "target-C") {
                correct_response = "false.</p>";
            }
        } else if (responseformat_assignment == "slider") {
            if (target == "target-A") {
                correct_response = "completely true.</p>";
            } else if (target == "target-B") {
                correct_response = "completely true.</p>";
            } else if (target == "target-C") {
                correct_response = "completely false.</p>";
            }
        }
    } else if (condition_assignment == "acceptability") {
        if (responseformat_assignment == "radio") {
            if (target == "target-A") {
                correct_response = "acceptable.</p>";
            } else if (target == "target-B") {
                correct_response = "acceptable.</p>";
            } else if (target == "target-C") {
                correct_response = "unacceptable.</p>";
            }
        } else if (responseformat_assignment == "slider") {
            if (target == "target-A") {
                correct_response = "completely acceptable.</p>";
            } else if (target == "target-B") {
                correct_response = "completely acceptable.</p>";
            } else if (target == "target-C") {
                correct_response = "completely unacceptable.</p>";
            }
        }
    // or else, the condition assignment is likelihood (which is always slider), meaning this is the feedback:
    } else if (condition_assignment == "likelihood") {
        if (target == "target-A") {
            correct_response = "it's certain that the sentence is true.</p>";
        } else if (target == "target-B") {
            correct_response = "there is an even chance that the sentence is true.</p>";
        } else if (target == "target-C") {
            correct_response = "the sentence couldn't possibly be true.</p>";
        }
    }
    var correct_response = correct_response; // needs to be stored in a variable to be properly accessible

    // a subtrial that appears if the participant chooses the correct response
    var correct_feedback = { 
        type: jsPsychHtmlButtonResponse, 
        stimulus: function () {
        // if the trial was a likelihood trial, show all four images in feedback
        if (condition_assignment == "likelihood") {
            return prompt + "<p><b style=color:forestgreen>Correct! Here, if a card is picked at random </br>" + correct_response +
            // The answer is \"" + answer + "\".<p>" + 
            "<img src=" + images[0] + " style='border:3px solid lightgray; width:200px'>" + "&nbsp; &nbsp;" +
            "<img src=" + images[1] + " style='border:3px solid lightgray; width:200px'>" +
            "</br>" + // need to get this horizontal space to match the width of the vertical one ideally! 
            "<img src=" + images[2] + " style='border:3px solid lightgray; width:200px'>" + "&nbsp; &nbsp;" + 
            "<img src=" + images[3] + " style='border:3px solid lightgray; width:200px'>";
        }
        // otherwise, show only the target image 
        else {
            return prompt + "<p><b style=color:forestgreen>Correct! For the highlighted card </br>the sentence is " + correct_response + 
            "<img src=" + target_filename + " style='border:3px solid lightgray; width:200px'>";
        }
        },
        choices: ['Continue'],
    };

    // this ties together all of the subtrials and hence is the final output of the training trial building function:
    var full_training_trial = { timeline: [training_trial, retry_loop, correct_feedback] }; 

  return full_training_trial;
}

// call the function to build the 3 training trials and store in a variable to be run in the final timeline
var training_trials = [
    make_training_trial("The triangle is blue.", "target-A", "filler-A1", "filler-A2", "filler-A3"), 
    make_training_trial("The square that is next to the triangle is green.", "target-B", "filler-B1", "filler-B2", "filler-B3"),
    make_training_trial("The circle is blue and is right of the triangle.", "target-C", "filler-C1", "filler-C2", "filler-C3")
  ];

/******************************************************************************/
/*** Creating testing trials **************************************************/
/******************************************************************************/

/*
There are 8 content types.

The conjunctive, anaphoric, only, ARC, def_ex, and def_un types instantiate all possible combinations of primary and secondary truth-value: TT, TF, FT, FF.

The scalar and numerical items only have 3 possible TV combinations, because one of the combinations is logically impossible due to entailment relations btw the primary and secondary contents.

For each possible content type/TV combination we associate two images. The only exception is the TF version of hte scalar item "Some of the circles are green", where only one image is possible bc the TF combination requires that all of the images be green circles.

The trial building function chooses the set of images to be used in any one trial to be of the same content type. This is so that we have control of the truth value for each of the filler images (relevant for probability trials) and not just the target image, as it means that the image names for fillers will indeed be correct for that combination of content type and prompt. 

*/

// Counter variable for storing the index of a test trial for data saving purposes; it will start from 1 and be incremented by +1 every time the function is called below, i.e. every time the loop loops. Then when saving each trial it will take the trial number from this variable.
var test_trial_counter = 0; 

// function to create the trials
function make_test_trial(target_content_type) {
    var qud_assignment;
    if (qud_global == 'no') { 
        // then this participant won't see any QUDs
        qud_assignment = 'qud4';
    } else { // else choose a QUD type at random by trial
        qud_assignment = jsPsych.randomization.sampleWithReplacement(['qud1','qud2','qud3'], 1)[0];
    }

    var truth_values = ["tt","tf","ft","ff"];

    // find all stims that match the target content type
    var trial_stims_pool = stims.filter(
        function(row) {
            return row.content_type == target_content_type;
        }
    );

    // out of the three stims that all have the target content type for that trial, pick one to use for this trial
    var trial_stim = jsPsych.randomization.sampleWithReplacement(trial_stims_pool, 1)[0]; 

    // Extract the qud that has been assigned from the target stimulus
    var qud = trial_stim[qud_assignment]; 
    var images_to_display = [];
    // set the highlighted image index and preamble depending on condition assignment 
    if (condition_assignment == "likelihood") {
        index = 4; // as images are 0-3, this makes there be no highlighted image for likelihood trials
    } else {
        index = jsPsych.randomization.sampleWithReplacement([0,1,2,3], 1)[0]; // else the highlight is determined by the position of the target image
    } 
    var target_truth_value = "NA";
    var target_image_filename = "NA";
    // will stay NA if we are in the likelihood condition, otherwise overwritten with target TV & image filename
    var all_TVs = [];
    for (var i=0; i<4; i++) { 
        // randomly select a TV for the relevant image
        var truth_value = jsPsych.randomization.sampleWithReplacement(truth_values, 1);
        // the scalar items don't have a ff condition, bc that would mean the primary (some) and secondary (not all) are both false, impossibly
        if (target_content_type == 'scalar') {
            while (truth_value == 'ff') {
                truth_value = jsPsych.randomization.sampleWithoutReplacement(truth_values, 1);
            }
        }
        // the numeral items don't have a ft condition, bc that would mean the primary (at least one) is false but secondary (exactly one) is true, impossibly
        if (target_content_type == 'numeral') {
            while (truth_value == 'ft') {
                truth_value = jsPsych.randomization.sampleWithoutReplacement(truth_values, 1);
            }
        }
        // identify all images with target truth value for that item, then pick one at random
        var image_candidates = find_imgs(trial_stim.prompt_name + "-" + truth_value);
        var image_filename = jsPsych.randomization.sampleWithReplacement(image_candidates, 1)[0];
        images_to_display.push(image_filename);
        if (i == index) {
            // record target truth value
            target_truth_value = truth_value;
            target_image_filename = image_filename;
        }
        all_TVs.push(truth_value);
    }
 
    // put trial together using either the custom radio button plugin or the custom slider plugin, dependent on response format assignment
    if (qud_assignment == "qud4") { 
    // NEW: if qud4 is assigned, the "question" and "response" bits are not inserted
        if (responseformat_assignment== "radio") {
            // make trials using custom radio button plugin
            var trial = {
                type: jsPsychImageArrayMultiChoice,
                images: images_to_display, 
                preamble: qud + "</p><br>" +  trial_stim.prompt + "</p><br>" +  instruction, 
                prompt: "",
                labels: response_options,
                highlighted_image_index: index,
    
                //at the start of the trial, make a note of all relevant info to be saved
                on_start: function (trial) {
                    trial.data = {
                        condition: condition_assignment,
                        qud: qud_assignment, 
                        response_format: "radio",
                        block: "test",
                        training_trial_counter: "NA",
                        test_trial_counter: ++test_trial_counter, 
                        target_truth_value: target_truth_value, 
                        all_TVs: all_TVs,
                        target_content_type: target_content_type,
                        target_image: target_image_filename,
                        images_in_order: images_to_display, // saves the filenames in the order they were presented in a trial
                        stimulus: trial_stim.prompt_name
                    };
                },
                on_finish: function (data) {
                    save_pragdep_data_line(data); //save the trial data
                },
            };
            return trial;
        } else { 
            // else make trials using custom slider plugin
            var slider_trial = {
                type: jsPsychImageArraySliderResponse,
                images: images_to_display,
                preamble: qud + "</p><br>" +  trial_stim.prompt + "</p><br>" +  instruction, 
                prompt: "",
                labels: response_options,
                highlighted_image_index: index,
               // slider_width: // can set this in pixels if desired
    
                //at the start of the trial, make a note of all relevant info to be saved
                on_start: function (slider_trial) {
                    slider_trial.data = {
                        condition: condition_assignment,
                        qud: qud_assignment,
                        response_format: "slider",
                        block: "test",
                        training_trial_counter: "NA",
                        test_trial_counter: ++test_trial_counter, 
                        target_truth_value: target_truth_value, 
                        all_TVs: all_TVs,
                        target_content_type: target_content_type,
                        target_image: target_image_filename,
                        images_in_order: images_to_display, 
                        stimulus: trial_stim.prompt_name
                    };
                },
                on_finish: function (data) {
                    save_pragdep_data_line(data); //save the trial data
                },
            };
            //console.log(slider_trial);
            return slider_trial;
        }     
    } else { 
    //NEW: if qud1-3 is assigned, the "question" and "response" bits are inserted
        if (responseformat_assignment== "radio") {
            // make trials using custom radio button plugin
            var trial = {
                type: jsPsychImageArrayMultiChoice,
                images: images_to_display, 
                preamble: "Question:&nbsp" + qud + "</p></br>" + "Response:&nbsp" + trial_stim.prompt + "</p></br>" +  instruction, 
                prompt: "",
                labels: response_options,
                highlighted_image_index: index,
    
                //at the start of the trial, make a note of all relevant info to be saved
                on_start: function (trial) {
                    trial.data = {
                        condition: condition_assignment,
                        qud: qud_assignment,
                        response_format: "radio",
                        block: "test",
                        training_trial_counter: "NA",
                        test_trial_counter: ++test_trial_counter, 
                        target_truth_value: target_truth_value,
                        all_TVs: all_TVs, 
                        target_content_type: target_content_type, 
                        target_image: target_image_filename,
                        images_in_order: images_to_display, 
                        // saves the filenames in the order they were presented in a trial
                        stimulus: trial_stim.prompt_name
                    };
                },
                on_finish: function (data) {
                    save_pragdep_data_line(data); //save the trial data
                },
            };
            return trial;
        } else { 
            // else make trials using custom slider plugin
            var slider_trial = {
                type: jsPsychImageArraySliderResponse,
                images: images_to_display,
                preamble: "Question:&nbsp" + qud + "</p></br>" + "Response:&nbsp" + trial_stim.prompt + "</p></br>" +  instruction, 
                prompt: "",
                labels: response_options,
                highlighted_image_index: index,
               // slider_width: // can set this in pixels if desired
    
                //at the start of the trial, make a note of all relevant info to be saved
                on_start: function (slider_trial) {
                    slider_trial.data = {
                        condition: condition_assignment,
                        qud: qud_assignment,
                        response_format: "slider",
                        block: "test",
                        training_trial_counter: "NA",
                        test_trial_counter: ++test_trial_counter,
                        target_truth_value: target_truth_value,
                        all_TVs: all_TVs,
                        target_content_type: target_content_type,
                        target_image: target_image_filename,
                        images_in_order: images_to_display, 
                        stimulus: trial_stim.prompt_name
                    };
                },
                on_finish: function (data) {
                    save_pragdep_data_line(data); //save the trial data
                },
            };
            return slider_trial;
        }
    }
}

/******************************************************************************/
/*** Create the stimuli list **************************************************/
/******************************************************************************/

// create array with n repetitions of each of the 6 content types in random order - this will determine the order in which 
// the test trials will be built and thereby presented (i.e. the randomisation of trial order happens already here)
// This way can easily adjust number of total trials up or down (and keep an equal number of each content type)
var content_types = ["con", "arc", "ana", "def_ex", "def_un", "only", "scalar", "numeral"];

//
// NEXT LINE CONTROLS HOW MANY TRIALS EACH PARTICIPANT SEES: 
// 8 content types * parameter below. 
// E.g., with parameter 3 each participant will see 3 of each = 24 test trials
//

// DEV ONLY!! 
var target_content_types = jsPsych.randomization.repeat(content_types, 1); 

// var target_content_types = jsPsych.randomization.repeat(content_types, 3); 

// build the trials according to the array of content types made at start of experiment. As this array was randomly shuffled by the jsPsych.randomization.repeat() function, we just loop through that array and push each trial into test_trials, which then goes in the timeline at the end 
var test_trials = []
for (target_content_type of target_content_types) {
    single_trial = make_test_trial(target_content_type);
    test_trials.push(single_trial);
}

/******************************************************************************/
/*** Preload ******************************************************************/
/******************************************************************************/

//console.log(images_to_preload);

var preload = {
    type: jsPsychPreload,
    auto_preload: true,
    images: images_to_preload,
    error_message: "The experiment failed to load. Please refresh the page."
};

//console.log(preload);

/******************************************************************************/
/*** Write headers for experiment data file ****************************************/
/******************************************************************************/

var write_headers = {
    type: jsPsychCallFunction,
    func: function () {
      var this_participant_filename = "pragdep/pragdep_" + participant_id + ".csv";
      //write column headers to pragdep_pilot_data.csv, with quotes around to match code saving line by line 
      save_data(
        this_participant_filename,
        "\"participant_id\",\
        \"condition\",\
        \"response_format\",\
        \"block\",\
        \"training_trial_count\",\
        \"test_trial_count\",\
        \"trial_index\",\
        \"target_truth_value\",\
        \"all_TVs\",\
        \"target_content_type\",\
        \"target_image\",\
        \"qud\",\
        \"images_in_presentation_order_0\",\
        \"images_in_presentation_order_1\",\
        \"images_in_presentation_order_2\",\
        \"images_in_presentation_order_3\",\
        \"response\",\
        \"time_elapsed\",\
        \"rt\"\n",
        \"stimName\"\n",
      );
    },
  };

/******************************************************************************/
/*** Write headers for survey data file ***************************************/
/******************************************************************************/

var write_survey_headers = { 
    type: jsPsychCallFunction,
    func: function () {
      var this_participant_filename = "pragdep/surveys/pragdep_" + participant_id + "_survey.csv"; 
      //write column headers to pragdep_pilot_data.csv, with quotes around to match code saving line by line 
      save_data(
        this_participant_filename,
        "\"participant_id\",\
        \"first_lang\",\
        \"bilingual\",\
        \"other_lang\",\
        \"colourblind\",\
        \"feedback\"\n" 
      );
    },
};

/******************************************************************************/
/*** Instruction trials *******************************************************/
/******************************************************************************/

var consent_screen = {
    type: jsPsychHtmlButtonResponse,
    stimulus:
        "<h3>Information and consent</h3> \
    <p style='text-align:left'> <b>Study title:</b> Sentences and shapes <br> \
    <b>Principal investigator:</b> Dan Lassiter <br> \
    <b>Researcher collecting data:</b> Dan Lassiter</p> \
    \
    <p style='text-align:left'> <b>What is this document?</b> This document explains what kind of study we're doing, what your rights are, \
    and what will be done with your data. You should print this page for your records.</p> \
    \
    <p style='text-align:left'> <b>Nature of the study.</b> You are invited to participate in a study which involves carefully reading sentences \
    about images showing different shapes and colours, and answering questions about the sentences and images. Once you finish, we also have some \
    questions about your experience (e.g. language background). Your responses will be recorded. Your session should last for around 8 minutes. \
    You will be given full instructions shortly.</p> \
    \
    <p style='text-align:left'> <b>Compensation.</b> You will be paid at the posted rate for your participation in this study.</p> \
    \
    <p style='text-align:left'> <b>Risks and benefits.</b> There are no known risks to participation in this study. Other than the payment mentioned, \
    there are no tangible benefits to you, however you will be contributing to our knowledge about language. </p> \
    \
    <p style='text-align:left'> <b>Confidentiality and use of data.</b> All the information we collect during the course of the research will be processed \
    in accordance with Data Protection Law. In order to safeguard your privacy, we will never share personal information (like your name) with anyone \
    outside the research team. Your data will be referred to by a unique participant number rather than by name. Please note that we will temporarily \
    collect your Prolific ID to prevent repeat participation, however we will never share this information with anyone outside the research team and once \
    data collection is complete this ID will be deleted. Data will be stored on a password-protected, encrypted computer. The anonymised data collected \
    during this study will be used for research purposes. This includes being made available for other researchers to analyse.</p> \
    \
    <p style='text-align:left'> <b>What are my data protection rights? </b> The University of Edinburgh is a Data Controller for the information you provide. \
    You have the right to access information held about you. Your right of access can be exercised in accordance with Data Protection Law. You also have other \
    rights including rights of correction, erasure and objection. For more details, including the right to lodge a complaint with the Information \
    Commissioner's Office, please visit www.ico.org.uk. Questions, comments and requests about your personal data can also be sent to the University Data \
    Protection Officer at dpo@ed.ac.uk.</p> \
    \
    <p style='text-align:left'> <b>Voluntary participation and right to withdraw.</b> Your participation is voluntary, and you may stop at any time and for \
    any reason. If you wish to withdraw during the study, simply close the browser window and do not complete the study. If you wish to withdraw from the \
    study after completing, you can email the researcher within 2 weeks of participating and we will delete your data. In this case, there is no penalty or \
    loss of benefits to which you are otherwise entitled. Please note that after the two weeks have passed we will no longer be able delete your anonymised \
    data because your Prolific ID will have been deleted.</p> \
    \
    <p style='text-align:left'> If you have any questions about what you've just read, please feel free to contact us now or later. You can contact us by \
    email at dan.lassiter@ed.ac.uk. This project has been approved by PPLS Ethics committee. If you have questions or comments regarding your rights as a \
    participant, please contact the School Research Convenor at ppls.rec@ed.ac.uk.</p> \
    \
    <p style='text-align:left'> By proceeding you consent to the following:</p> \
    <ol type='1'> \
    <li><p style='text-align:left'><b>I agree to participate in this study.</b></li> \
    <li><p style='text-align:left'>I confirm that I have read and understood <b>how my data will be stored and used</b>.</li> \
    <li><p style='text-align:left'>I understand that I have the <b>right to terminate this session</b> at any point. If I choose to <b>withdraw after <br>\
    completing the study, I have up to 2 weeks from today to do so</b>, and my data will be deleted.</li> \
    </ol></p> ",
    choices: ["Yes, I consent"],
};

// Instructions will depend on condition assignment, so made the stimulus parameter dynamic by using a function
// that checks what the condition assignment is and returns the corresponding instructions
var instructions = {
    type: jsPsychHtmlButtonResponse,
    stimulus: function(){
        if (condition_assignment == "likelihood") {
            return "<h3>Instructions for the experiment</h3> \
            <p style='text-align:left'>In each question, you will see a set of 4 cards and a sentence describing the cards.</p> \
            <p style='text-align:left'>Your task is to indicate how likely the sentence is to be true for the 4 cards.<br> \
            <p style='text-align:left'>We'll start with three practice questions.</p>  \
            <p style='text-align:left'>When you feel ready, click Continue below to start the practice section.</p>";
        } else if (condition_assignment == "truth") {
            return "<h3>Instructions for the experiment</h3> \
            <p style='text-align:left'>In each question, you will see a set of 4 cards and a sentence describing the cards.</p> \
            <p style='text-align:left'>One of the cards will be highlighted with a red dashed line. Your task is to indicate<br>whether \
            the sentence is true for <u>the highlighted card</u> only.<br> \
            <p style='text-align:left'>We'll start with three practice questions.</p> \
            <p style='text-align:left'>When you feel ready, click Continue below to start the practice section.</p>";
        } else if (condition_assignment == "acceptability") {
            return "<h3>Instructions for the experiment</h3> \
            <p style='text-align:left'>In each question, you will see a set of 4 cards and a sentence describing the cards.</p> \
            <p style='text-align:left'>One of the cards will be highlighted with a red dashed line. Your task is to indicate<br>whether \
            the sentence is acceptable for <u>the highlighted card</u> only.<br> \
            <p style='text-align:left'>We'll start with three practice questions.</p> \
            <p style='text-align:left'>When you feel ready, click Continue below to start the practice section.</p>";
        }
    }, 
    choices: ["Continue"],
};

var exp_start = {
    type: jsPsychHtmlButtonResponse,
    stimulus:
      "<h3>Start of the experiment</h3> \
    <p style='text-align:left'>That is the practice part done. Next we will start the real experiment.</p> \
    <p style='text-align:left'>In some of the following questions the response might not be obvious.<br> \
    Just respond with your first intuition and don't overthink it. </p> \
    <p style='text-align:left'>When you feel ready to start, click Continue below.</p>",
    choices: ["Continue"],    
}
var final_screen = {
    type: jsPsychHtmlButtonResponse,
    stimulus:
      "<h3>Finished!</h3> \
    <p style='text-align:left'>Thank you for taking part!</p> \
    <p style='text-align:left'>Click Finish to complete the experiment and return to Prolific.</p>",
    choices: ["Finish"],
};

/******************************************************************************/
/*** Demographics and feedback ************************************************/
/******************************************************************************/

var demographics_and_feedback = {
    type: jsPsychSurveyHtmlForm,
    preamble:
      "<p style='text-align:left'> <b>Demographics survey</b></p>\
                <p style='text-align:left'> Finally, we would like to \
                gather some background information about you. This will not be \
                associated with <br>any information that might identify you and will not \
                impact your pay for participating in this study.</p>", 
    html: "<p style='text-align:left'>What is your first language?<br> \
                <input required name='first_lang' type='text'></p> \
            <p style='text-align:left'>Was any other language spoken \
             in the home before the age of 6?<br>\
                <input required name='bilingual' type='radio' value='yes'><label>Yes</label> \
                <input required name='bilingual' type='radio' value='no'><label>No</label></p> \
            <p style='text-align:left'>If you responded yes above, \
           which language(s)?<br>\
              <input name='other_lang' type='text'></p> \
            <p style='text-align:left'>Do you experience colourblindness?<br> \
                <input required name='colourblind' type='radio' value='yes'><label>Yes</label> \
                <input required name='colourblind' type='radio' value='no'><label>No</label></p> \
            <p style='text-align:left'> <b>Feedback</b></p> \
                <p style='text-align:left'>Do you have any comments about this experiment?<br> \
                <input name='feedback' type='text'></p>",
    on_finish: function (data) {
        save_survey_line(data); // save the survey data
    },
};

/******************************************************************************/
/*** Build the full timeline **************************************************/
/******************************************************************************/

var full_timeline = [].concat(
    consent_screen,
    instructions,
    write_headers,
    write_survey_headers,
    preload,
    training_trials,
    exp_start, 
    test_trials,
    demographics_and_feedback,
    final_screen
);

/******************************************************************************/
/*** Run the timeline *********************************************************/
/******************************************************************************/

jsPsych.run(full_timeline);